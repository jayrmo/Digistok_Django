Criação projeto Django
1- Cria a .venv
python -m venv .venv
2- Instala o Django
pip install Django
3- cria o projeto com: 
django-admin startprojetct nomedoprojeto

----------------------------------------------------
Criação de superuser para area admin
1-python manage.py createsuperuser(foi criado user django, django@gmail.com, senha django)
2-Para os modelos criados serem gerenciados pelo admin tem q adicionar no arquivo admin após importa-lós
   ´´´ 
    from .models import *

    admin.site.register(nome_modelo_tabela)
    ´´´
----------------------------------------------------
Criação de app
1- cria o app na pasta do projeto com: python manage.py startprojetct nomedoapp
2- Adiciona o app no arquivo settings.py na lista INSTALLED_APPS=['nomedoapp']

----------------------------------------------------
Linkar app
1- Adiciona o include no import do arquivo urls do projeto: from django.urls import path, include
2- cria o path no arquivo urls.py do projeto apontando para urls do app: path('', include('nomedoapp.urls'))
3- Cria o urls.py no app com a estrutura parecida do urls do projeto
    ´´´
    from django.urls import path
    from .views import * #importa todas as funções de dentro do arquivo views

    urlpatterns = [
        path('', homepage, name='homepage'),#cria o link da página homepage(q é def em views).O name é um identificador q aponta para esse caminho dentro da ''.Nesse caso o caminho é o dominio puro..
    ]
    ´´´
----------------------------------------------------
Para adiconar nova página:
1- Cria o link em urls 
2- Cria a função em views #função serve para direcionar para página html do site
3- Cria a página em templates #armazena a página html

----------------------------------------------------
Páginas Dinamicas:
1-Criar o base.html com a estrutura comum a todas as Páginas
2-Adicionar as tags {% block body %}{% endblock %} ( tag q será usada nas páginas do site )
3-Em cada página do site importar o base.html atravé de {% extends 'base.html'%}
4-Em cada página do site colocar o conteudo dentro das tags do body  {% block body %}{% endblock %}

----------------------------------------------------
Arquivos Estaticos:
1-Criar a estrutura de pasta static dentro do projeto
2-Adicionar o diretorio da pasta static no settings para ser encontrado.
    2.1-importa a biblioteca os (import os) no settings
    2.2-adiciona o texto abaixo
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static') 
        #BASE_DIR é uma variavel criada automatico com o caminho do projeto.
        # 'static' é a pasta dos arquivos estaticos do projeto.
]
3-No base.html adicona a tag de carregar o static {% load static %} no inicio.
4-Ainda no base.html adiciona o link
    <link rel="stylesheet" type="text/css" href="{% static 'css/main.css' %}" >
    #Usa o href com a tag para o django encontrar a pasta static mesmo se mudar de local ou alterar a variavel STATIC_URL do settings.
5-Em todos as páginas html carrega com o {% load static %} na linha após o extends  
6- Agora sempre q estilizar o main.css, todas as páginas irão receber essa atualização pegando o link do base e carregando atravês do load.

7-O titulo da página é definido no views e usado a variavel no html para chamar {{title}}
8-A barra lateral é chamada através do include no html base


----------------------------------------------------
Criar o ToString para exibir valores personalizados em cada model
1-def __str__(self):
        return self.nome

----------------------------------------------------
Arquivo Imagem em Db
1- Em model usa o tipo models.ImageField()
2- instalar : python3 -m pip install pillow
3- Criar a avariavel MEDIA_ROOT = os.path.join(BASE_DIR, 'static/images') #coloca o caminho pra armazenar
4- Criar a varivael MEDIA_URL = "imagens/" #coloca o nome que vai aparecer no navegador 
5- NO URLs do projeto e não do app importa a pasta static e usa a função:
    ´´´
    from django.conf.urls.static import static
    from django.conf import settings
    
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) #colocado logo abaixo da lista já criada urlpatterns
    ´´´
    


---------------------------------------------------------------------------------------
Ativar login automatico
O django recebe os parametros no formulario html como username e password.
Para mensageria de erro usar o if abaixo dentro do login.html:
 {% if form.errors %}
     <div style="color: red;">
         <p>Usuário ou senha inválidos.</p>
     </div>
 {% endif %}


No settings:
LOGIN_URL = 'login' -Para onde mandar quem tentou acessar área protegida.
LOGIN_REDIRECT_URL = 'homepage' -Para onde redirecionar após login bem-sucedido.
LOGOUT_REDIRECT_URL = 'login' -Para onde ir após logout.
TEMPLATES = [
    {...
            'context_processors': [
                ...
                'django.contrib.messages.context_processors.messages',
                ...
            ],
        },  
]
INSTALLED_APPS = [
    ...
    'django.contrib.messages',
    ...
    
]


-------------------------------------------------------------------
Criação de CBV login personalizados


Na views
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login
from django.shortcuts import render, redirect
from django.contrib import messages

# class Login(View):
#     def get(self, request):
#         return render(request, 'login.html')

#     def post(self, request):
#         username = request.POST.get('username')
#         password = request.POST.get('password')
#         user = authenticate(request, username=username, password=password)
        
#         if user is not None:
#             login(request, user)
#             return redirect('homepage')
#         else:
#             messages.error(request, 'Usuário ou senha inválidos')
#             if messages.get_messages(request):
#                 primeira_mensagem = list(messages.get_messages(request))[0]
#             context = {'primeira_mensagem': primeira_mensagem}
#             return render(request, 'login.html', context)


No URLs
    from django.contrib.auth import views as auth_views
    # path('login/', Login.as_view(),name='login'),

No settings
TEMPLATES = [
    {...
            'context_processors': [
                ...
                'django.contrib.messages.context_processors.messages',
                ...
            ],
        },  
]
INSTALLED_APPS = [
    ...
    'django.contrib.messages',
    ...
    
]

-------------------------------------------------------

Para proteger páginas sem logar
Nas function base views

from django.contrib.auth.decorators import login_required

@login_required
def nomeView(request):
    ...

Nas Class base views
(Dica: LoginRequiredMixin deve vir antes da CBV base (TemplateView , ListView, etc.) na herança.)

from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import TemplateView

class DashboardView(LoginRequiredMixin, TemplateView):
 template_name = 'usuarios/dashboard.html'



--------------------------------------
logout

template html q deseja q fique o botao de entrar e sair
<div class="user-actions">
        {% if user.is_authenticated %}
        <span>Bem-vindo, {{ user.first_name|default:user.username }}!</span>
        <form action="{% url 'logout' %}" method="post">
            {% csrf_token %}
            <button type="submit" class="btn-logout">Sair</button>
        </form>
        {% else %}
        <a href="{% url 'login' %}" class="btn-login">Entrar</a>
        {% endif %}
    </div>


views
from django.views.decorators.cache import never_cache
from django.utils.decorators import method_decorator

@method_decorator(never_cache, name='dispatch')
class HomePage(View):
    def get(self, request):
        return render(request, 'noticias/homepage.html')


urls
from django.contrib.auth import views as auth_views
from django.contrib.auth.views import LoginView

urlpatterns = [
    path('', HomePage.as_view(), name='homepage'),
    path('login/', LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),
]